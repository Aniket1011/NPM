{
	"name": "DF_EQY_DLS_RAW_DLS_CLN_COURSE_DTLS_clone",
	"properties": {
		"folder": {
			"name": "Equalify"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_DLS_dlzfdpsa",
						"type": "LinkedServiceReference"
					},
					"name": "readcourseresultdata"
				},
				{
					"linkedService": {
						"referenceName": "LS_DLS_dlzfdpsa",
						"type": "LinkedServiceReference"
					},
					"name": "courseresultcleansed"
				},
				{
					"linkedService": {
						"referenceName": "LS_DLS_dlzfdpsa",
						"type": "LinkedServiceReference"
					},
					"name": "DRPreport"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_DLS_dlzfdpsa",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "RenameUserItemColumns"
				},
				{
					"name": "setingdatatype"
				},
				{
					"name": "trimwhitespaces"
				},
				{
					"name": "selectrequiredcolumns"
				},
				{
					"name": "distinctrows"
				},
				{
					"name": "selectrequiredcols"
				},
				{
					"name": "removenull"
				},
				{
					"name": "trimspace"
				},
				{
					"name": "selectcols"
				},
				{
					"name": "selectreqcols"
				},
				{
					"name": "spaceremove"
				},
				{
					"name": "joiningdata"
				},
				{
					"name": "FilterActiveUsers"
				},
				{
					"name": "selectreqcolumns"
				},
				{
					"name": "joinuseridgpid"
				},
				{
					"name": "selectcolumns"
				},
				{
					"name": "replaceids"
				},
				{
					"name": "selectfinalcolumns"
				},
				{
					"name": "filternullrecords"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Item ID} as string,",
				"          {Item Title} as string,",
				"          {Item Status} as string,",
				"          {Program ID} as string,",
				"          {Curriculum ID} as string,",
				"          {KBS Classification } as string,",
				"          {Item Type} as string,",
				"          {Assignment Type} as string,",
				"          {Security Domain (Item)} as string,",
				"          {CPD/CPE Hours (Item)} as double,",
				"          {Item Revision Date} as string,",
				"          {Revision Number} as short,",
				"          {Class ID} as integer,",
				"          {Scheduled Offering Start Date} as string,",
				"          {SO/Item Start Time} as string,",
				"          {Class End Date} as string,",
				"          {Scheduled Offering End Time} as string,",
				"          {Completion Date} as string,",
				"          {Completion Time} as string,",
				"          Grade as string,",
				"          {Completion Status ID} as string,",
				"          {Completion Status Description} as string,",
				"          {Total Hours} as double,",
				"          {Credit Hours} as double,",
				"          {Contact Hours} as double,",
				"          {CPD/CPE Hours Awarded} as double,",
				"          Tuition as boolean,",
				"          {Currency Symbol} as string,",
				"          {Currency ID} as string,",
				"          Instructor as string,",
				"          {Primary Instructor Company ID} as string,",
				"          {Last Update User ID} as string,",
				"          {Last Update Timestamp} as string,",
				"          {Last Update Time} as string,",
				"          {E-signature Meaning Code} as string,",
				"          Comments as string,",
				"          {Local HR ID} as integer,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          {Middle Name} as string,",
				"          {Email Address (User)} as string,",
				"          {User ID} as string,",
				"          {Account ID} as string,",
				"          {Account Description} as string,",
				"          {User Status} as string,",
				"          {Employee Status ID} as string,",
				"          {Role ID} as string,",
				"          {Role Description} as string,",
				"          {Job Code ID} as short,",
				"          {Job Code Description} as string,",
				"          {Job Title} as string,",
				"          {Region ID} as string,",
				"          {Country/Region ID} as string,",
				"          {Country/Region} as string,",
				"          {Office Location ID} as string,",
				"          Department as string,",
				"          {Global Function ID} as short,",
				"          {Global Function} as string,",
				"          {Organisation Description} as string,",
				"          Subfunction as string,",
				"          {Employee Class ID} as string,",
				"          {Employee Class Description} as string,",
				"          {Local Job Level} as string,",
				"          {Global Service Line} as short,",
				"          {Global Line of Business} as boolean,",
				"          {Global Sector} as boolean,",
				"          {Legal Entity} as short,",
				"          {Business Group} as string,",
				"          {Is Client Facing?} as boolean,",
				"          {Manager Email Address} as string,",
				"          {Manager First Name} as string,",
				"          {Manager Last Name} as string,",
				"          {Manager Middle Initial} as string,",
				"          {Last Hire Date} as string,",
				"          {LMS Custom Field 11 (Obsolete) } as string,",
				"          {LMS Custom Field 12 (Obsolete) } as string,",
				"          {LMS Custom Field 13 (Obsolete) } as string,",
				"          {LMS Custom Field 1 (Obsolete) } as string,",
				"          SO_Description as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: true,",
				"     rowUrlColumn: 'file_name',",
				"     format: 'delimited',",
				"     fileSystem: 'adf',",
				"     folderPath: 'Source1',",
				"     fileName: 'sample data.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\"',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     multiLineRow: true) ~> readcourseresultdata",
				"source(output(",
				"          sys_id as string,",
				"          item_id as string,",
				"          item_title as string,",
				"          assignment_type as string,",
				"          revision_number as string,",
				"          class_id as string,",
				"          completion_date as string,",
				"          completion_status_id as string,",
				"          total_hours as string,",
				"          local_hr_id as string,",
				"          user_id as string,",
				"          department as string,",
				"          item_revision_date as string,",
				"          {item status} as string,",
				"          cpe as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: true,",
				"     format: 'delimited',",
				"     fileSystem: 'adf',",
				"     folderPath: 'Source2',",
				"     fileName: 'course_result.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\"',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     multiLineRow: true) ~> courseresultcleansed",
				"source(output(",
				"          {Pers.No.} as string,",
				"          Status as string,",
				"          {Full Name} as string,",
				"          {First Name} as string,",
				"          {Last Name} as string,",
				"          Grade as string,",
				"          Step as string,",
				"          {Work Contract} as string,",
				"          {Cost Centre} as string,",
				"          {Cost Center Description} as string,",
				"          Coverage as string,",
				"          {Performance Group} as string,",
				"          Function as string,",
				"          {Service Line Group} as string,",
				"          {Sub Service} as string,",
				"          {Sub Performance Group} as string,",
				"          Office as string,",
				"          {Continuous Service Date} as string,",
				"          {Name of Employee Group} as string,",
				"          {Name of Employee Subgroup} as string,",
				"          {Work Email} as string,",
				"          {Qualification Table_Name} as string,",
				"          Qualification as string,",
				"          {Qualification Start Date} as string,",
				"          {Qualification End Date} as string,",
				"          {Audit Qualification Held?} as boolean,",
				"          {Grade Entry Date} as string,",
				"          GPID as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     rowUrlColumn: 'filename',",
				"     modifiedAfter: (addDays(currentUTC(),-7)),",
				"     format: 'delimited',",
				"     fileSystem: 'adf',",
				"     folderPath: 'Source3',",
				"     fileName: 'DRP 5113_HC_Qualification_08-07-2024.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> DRPreport",
				"FilterActiveUsers select(mapColumn(",
				"          item_id = {Item ID},",
				"          item_title = {Item Title},",
				"          assignment_type = {Assignment Type},",
				"          revision_number = {Revision Number},",
				"          class_id = {Class ID},",
				"          completion_date = {Completion Date},",
				"          total_hours = {Total Hours},",
				"          local_hr_id = {Local HR ID},",
				"          user_id = {User ID},",
				"          department = Department,",
				"          {item Status} = {Item Status},",
				"          {Completion Status Description},",
				"          file_name,",
				"          item_cpe = {CPD/CPE Hours (Item)}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameUserItemColumns",
				"RenameUserItemColumns derive(item_id = toString(byName('item_id')),",
				"          assignment_type = toString(byName('assignment_type')),",
				"          item_revision_date = toString(byName('item_revision_date')),",
				"          revision_number = toString(byName('revision_number')),",
				"          item_title = toString(byName('item_title')),",
				"          class_id = toString(byName('class_id')),",
				"          completion_date = toString(byName('completion_date')),",
				"          department = toString(byName('department')),",
				"          user_id = toString(byName('user_id')),",
				"          local_hr_id = toString(byName('local_hr_id')),",
				"          total_hours = toString(byName('total_hours')),",
				"          file_name = toString(byName('file_name')),",
				"          item_cpe = toString(byName('item_cpe'))) ~> setingdatatype",
				"selectrequiredcolumns derive(each(match(type=='string'), $$ = case(toString($$) == '', 'NULL', trim(toString($$))))) ~> trimwhitespaces",
				"setingdatatype select(mapColumn(",
				"          item_id,",
				"          item_title,",
				"          assignment_type,",
				"          revision_number,",
				"          class_id,",
				"          completion_date,",
				"          completion_status_id = {Completion Status Description},",
				"          total_hours,",
				"          local_hr_id,",
				"          user_id,",
				"          department,",
				"          item_revision_date,",
				"          {item status} = {item Status},",
				"          file_name,",
				"          item_cpe",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrequiredcolumns",
				"selectfinalcolumns aggregate(groupBy(sys_id = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> distinctrows",
				"distinctrows select(mapColumn(",
				"          sys_id,",
				"          item_id,",
				"          item_title,",
				"          assignment_type,",
				"          revision_number,",
				"          class_id,",
				"          completion_date,",
				"          completion_status_id,",
				"          total_hours,",
				"          local_hr_id,",
				"          user_id,",
				"          department,",
				"          item_revision_date,",
				"          {item status} = {Item Status},",
				"          file_name,",
				"          item_cpe",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectrequiredcols",
				"trimwhitespaces filter(!isNull(item_id)) ~> removenull",
				"courseresultcleansed derive(each(match(type=='string'), $$ = trim(regexReplace(trim($$),'\\r\\n*\\n*','\\n')))) ~> trimspace",
				"spaceremove select(mapColumn(",
				"          {Item ID} = item_id,",
				"          {Item Title} = item_title,",
				"          {Assignment Type} = assignment_type,",
				"          {Revision Number} = revision_number,",
				"          {Class ID} = class_id,",
				"          {Completion Date} = completion_date,",
				"          {Completion Status Id} = completion_status_id,",
				"          {Total hours} = total_hours,",
				"          {Local hr id} = local_hr_id,",
				"          {User Id} = user_id,",
				"          Department = department,",
				"          {Item Revision Date} = item_revision_date,",
				"          {item status},",
				"          cpe",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcols",
				"removenull select(mapColumn(",
				"          item_id,",
				"          item_title,",
				"          assignment_type,",
				"          revision_number,",
				"          class_id,",
				"          completion_date,",
				"          completion_status_id,",
				"          total_hours,",
				"          local_hr_id,",
				"          user_id,",
				"          department,",
				"          item_revision_date,",
				"          {Item status} = {item status},",
				"          file_name,",
				"          item_cpe",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectreqcols",
				"trimspace derive(each(match(type=='string'), $$ = case(toString($$) == '', 'NULL', trim(toString($$))))) ~> spaceremove",
				"selectreqcols, selectcols join(item_id == {Item ID}",
				"     && class_id == {Class ID}",
				"     && item_title == {Item Title}",
				"     && assignment_type == {Assignment Type}",
				"     && revision_number == {Revision Number}",
				"     && completion_date == {Completion Date}",
				"     && completion_status_id == {Completion Status Id}",
				"     && total_hours == {Total hours}",
				"     && local_hr_id == {Local hr id}",
				"     && user_id == {User Id}",
				"     && selectreqcols@department == selectcols@Department",
				"     && selectreqcols@{Item status} == selectcols@{item status}",
				"     && item_cpe == cpe,",
				"     joinType:'left',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joiningdata",
				"readcourseresultdata filter({User Status} == 'ACTIVE') ~> FilterActiveUsers",
				"DRPreport select(mapColumn(",
				"          {Pers.No.},",
				"          {Performance Group},",
				"          GPID,",
				"          filename",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectreqcolumns",
				"selectcolumns, selectreqcolumns join(user_id == GPID,",
				"     joinType:'right',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinuseridgpid",
				"joiningdata select(mapColumn(",
				"          item_id,",
				"          item_title,",
				"          assignment_type,",
				"          revision_number,",
				"          class_id,",
				"          completion_date,",
				"          completion_status_id,",
				"          total_hours,",
				"          local_hr_id,",
				"          user_id,",
				"          department = selectreqcols@department,",
				"          item_revision_date,",
				"          {Item Status} = selectreqcols@{Item status},",
				"          file_name,",
				"          item_cpe",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectcolumns",
				"joinuseridgpid derive(user_id = case(startsWith(GPID, 'KPMG'), {Pers.No.}, \r",
				"(startsWith(user_id, 'KPMG')), local_hr_id, \r",
				"(startsWith(local_hr_id, '44')), local_hr_id, user_id)) ~> replaceids",
				"replaceids select(mapColumn(",
				"          item_id,",
				"          item_title,",
				"          assignment_type,",
				"          revision_number,",
				"          class_id,",
				"          completion_date,",
				"          completion_status_id,",
				"          total_hours,",
				"          local_hr_id,",
				"          user_id,",
				"          department,",
				"          item_revision_date,",
				"          {Item Status},",
				"          file_name,",
				"          Pers_No = {Pers.No.},",
				"          GPID,",
				"          filename,",
				"          item_cpe",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectfinalcolumns",
				"selectrequiredcols filter(!isNull(item_id)) ~> filternullrecords",
				"filternullrecords sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'adf',",
				"     folderPath: 'Sink1',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\"',",
				"     quoteChar: '\\\"',",
				"     encodingName: 'WINDOWS-1252',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:[(concat('course_result_',toString(currentDate(),'dd-MM-yyy'),'.csv'))],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}